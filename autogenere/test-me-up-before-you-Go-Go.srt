1
00:00:01,840 --> 00:00:13,009
[Musique]

2
00:00:13,019 --> 00:00:14,639
bonjour à toutes et à tous et bienvenue

3
00:00:14,639 --> 00:00:17,400
dans ce talk où on va parler qu'est-ce

4
00:00:17,400 --> 00:00:20,880
qu'on tiner et golank qui est le langage

5
00:00:20,880 --> 00:00:23,820
de que je pratique actuellement donc

6
00:00:23,820 --> 00:00:25,140
pour ceux qui l'auraient pas reconnu

7
00:00:25,140 --> 00:00:28,140
c'est c'est un jeu de mots avec la

8
00:00:28,140 --> 00:00:30,960
chanson et le titre de la confe j'ai

9
00:00:30,960 --> 00:00:32,040
entendu personne chanter donc je suis

10
00:00:32,040 --> 00:00:35,219
assez déçu voilà c'est dommage la

11
00:00:35,219 --> 00:00:36,180
dernière confie il y a plein de gens qui

12
00:00:36,180 --> 00:00:38,360
ont chanté

13
00:00:38,950 --> 00:00:41,120
[Musique]

14
00:00:41,120 --> 00:00:45,440
c'est beau c'est beau merci beaucoup

15
00:00:51,990 --> 00:00:55,109
[Musique]

16
00:01:08,980 --> 00:01:16,469
[Musique]

17
00:01:42,439 --> 00:01:45,180
et pour les joueurs bien entendu donc

18
00:01:45,180 --> 00:01:46,920
c'est juste enfin cher plaît c'est un

19
00:01:46,920 --> 00:01:48,420
produit qui permet en fait de faire

20
00:01:48,420 --> 00:01:50,000
essayer un jeu à une autre personne

21
00:01:50,000 --> 00:01:52,140
c'est un peu l'équivalent du prête-moi

22
00:01:52,140 --> 00:01:53,700
ton jeu physique qui n'existe plus

23
00:01:53,700 --> 00:01:54,780
maintenant puisqu'on donnait tout en

24
00:01:54,780 --> 00:01:57,420
dématérialisé mais on le fait grâce à

25
00:01:57,420 --> 00:01:59,700
une nouvelle technologie de streaming on

26
00:01:59,700 --> 00:02:00,479
peut le faire essayer pendant un moment

27
00:02:00,479 --> 00:02:03,799
et puis si il est content il l'achète

28
00:02:04,020 --> 00:02:06,060
grand sourire et on arrive notre plaie

29
00:02:06,060 --> 00:02:07,500
aussi qui permet de jouer dans votre

30
00:02:07,500 --> 00:02:10,139
salon tranquille à votre PC qui est à

31
00:02:10,139 --> 00:02:13,200
l'étage ou dans votre tour voilà donc

32
00:02:13,200 --> 00:02:14,940
vous pouvez jouer tranquillement avec

33
00:02:14,940 --> 00:02:16,680
votre votre mobile par exemple ou votre

34
00:02:16,680 --> 00:02:19,200
tablette dans votre canapé

35
00:02:19,200 --> 00:02:21,180
on va revenir un peu au sujet de cette

36
00:02:21,180 --> 00:02:22,560
conférence donc moi je vais vous parler

37
00:02:22,560 --> 00:02:25,500
de test et puis plus particulièrement de

38
00:02:25,500 --> 00:02:29,160
tests unitaires et test de composants ça

39
00:02:29,160 --> 00:02:30,660
c'est un slide que j'aime bien qui est

40
00:02:30,660 --> 00:02:33,180
de Martin Soler qui décrit comment

41
00:02:33,180 --> 00:02:34,940
tester des architectures microservices

42
00:02:34,940 --> 00:02:36,959
et il découpe ça de manière assez

43
00:02:36,959 --> 00:02:39,900
visuelle et en particulier on voit que

44
00:02:39,900 --> 00:02:42,260
dans un micro service il y a

45
00:02:42,260 --> 00:02:44,400
des mémoires des bases de données

46
00:02:44,400 --> 00:02:45,900
mémoire quand on veut faire des tests

47
00:02:45,900 --> 00:02:48,420
unitaires souvent H2 pour les plus

48
00:02:48,420 --> 00:02:50,340
connus en général on a des services

49
00:02:50,340 --> 00:02:52,739
externes on a notre couche du domaine si

50
00:02:52,739 --> 00:02:54,920
vous faites du DDD et

51
00:02:54,920 --> 00:02:56,840
en général

52
00:02:56,840 --> 00:02:59,040
quand on teste unitairement on n'aime

53
00:02:59,040 --> 00:03:00,060
pas se connecter à une vraie base de

54
00:03:00,060 --> 00:03:01,620
données parce que c'est du test unitaire

55
00:03:01,620 --> 00:03:04,640
mais parfois on aimerait bien le faire

56
00:03:04,640 --> 00:03:08,400
et quand on teste les le service il y a

57
00:03:08,400 --> 00:03:09,480
des tests unitaires qui sont les tests

58
00:03:09,480 --> 00:03:10,980
les plus bas les plus les plus petits

59
00:03:10,980 --> 00:03:13,620
les plus unitaires de votre système et

60
00:03:13,620 --> 00:03:15,659
les tests de composants c'est dans le

61
00:03:15,659 --> 00:03:18,300
SCOP d'exécution du micro service mais

62
00:03:18,300 --> 00:03:20,940
en ce banc en bouchonnant toutes les

63
00:03:20,940 --> 00:03:22,680
dépendances donc vous voulez faire des

64
00:03:22,680 --> 00:03:25,019
tests qui permettent de faire réagir le

65
00:03:25,019 --> 00:03:27,840
service à des stimuli externes et voir

66
00:03:27,840 --> 00:03:29,159
ce qui produit par votre micro service

67
00:03:29,159 --> 00:03:31,680
un peu en mode Black Box texting testing

68
00:03:31,680 --> 00:03:34,140
en fait une boîte noire

69
00:03:34,140 --> 00:03:36,300
si on prend aussi le parallèle avec les

70
00:03:36,300 --> 00:03:38,879
archives hexagonales ce qui arrive dans

71
00:03:38,879 --> 00:03:40,260
votre service c'est tout ce qui est

72
00:03:40,260 --> 00:03:42,360
adaptateur primaire ou adaptateur

73
00:03:42,360 --> 00:03:44,400
primaire je sais plus comment dire et ce

74
00:03:44,400 --> 00:03:46,379
qui sort donc ce qui interne caché

75
00:03:46,379 --> 00:03:47,879
souvent ou qui est publié par votre

76
00:03:47,879 --> 00:03:49,379
service ce sont les adaptateurs

77
00:03:49,379 --> 00:03:52,560
adaptateurs secondaires donc driving ou

78
00:03:52,560 --> 00:03:54,000
driving en anglais donc c'est vraiment

79
00:03:54,000 --> 00:03:56,340
ce qu'on conduit et ceux qui nous

80
00:03:56,340 --> 00:03:58,019
conduisent en fait comme ça pourra

81
00:03:58,019 --> 00:03:59,060
traduire ça

82
00:03:59,060 --> 00:04:00,900
mais des fois j'aimerais bien vouloir

83
00:04:00,900 --> 00:04:04,260
tester comment se comporte mon service

84
00:04:04,260 --> 00:04:05,220
avec une base de données par exemple

85
00:04:05,220 --> 00:04:07,019
parce que ça permettrait de garantir que

86
00:04:07,019 --> 00:04:09,360
mes tests ont un sens et que ça marche

87
00:04:09,360 --> 00:04:10,439
bien

88
00:04:10,439 --> 00:04:11,480
et

89
00:04:11,480 --> 00:04:13,319
l'exemple parfait pour ça c'est une base

90
00:04:13,319 --> 00:04:15,780
de données relationnelle il y a un

91
00:04:15,780 --> 00:04:18,060
article de Philippe power sur son blog

92
00:04:18,060 --> 00:04:20,220
qui explique pourquoi il faut pas tester

93
00:04:20,220 --> 00:04:22,440
avec des bases de données H2 si vous

94
00:04:22,440 --> 00:04:23,880
voulez avoir des surprises en prod ou en

95
00:04:23,880 --> 00:04:24,900
déploiement sur un environnement c'est

96
00:04:24,900 --> 00:04:26,340
le meilleur moyen de le faire vous aurez

97
00:04:26,340 --> 00:04:27,000
des surprises dans tous les sens

98
00:04:27,000 --> 00:04:28,800
pourquoi parce que ce qu'on ne teste pas

99
00:04:28,800 --> 00:04:30,360
quand on a des microservices ou des

100
00:04:30,360 --> 00:04:32,280
services c'est que on migre bien les

101
00:04:32,280 --> 00:04:34,139
schémas de base de données quid des

102
00:04:34,139 --> 00:04:36,000
données existantes est-ce qu'il y aurait

103
00:04:36,000 --> 00:04:37,139
pas des conflits avec quand on va

104
00:04:37,139 --> 00:04:39,180
déployer de nouveaux services quid des

105
00:04:39,180 --> 00:04:41,040
spécificités ou des petites blagounettes

106
00:04:41,040 --> 00:04:42,540
avec les bases de données sur les dates

107
00:04:42,540 --> 00:04:45,300
les formats de date on a tous eu des

108
00:04:45,300 --> 00:04:46,800
problèmes comme ça sur des sur la base

109
00:04:46,800 --> 00:04:48,120
de données ça se comporte très bien en

110
00:04:48,120 --> 00:04:49,919
mémoire et d'un coup on déploie le

111
00:04:49,919 --> 00:04:51,780
service et la base de données elle dit à

112
00:04:51,780 --> 00:04:53,840
1 je suis en version 3

113
00:04:53,840 --> 00:04:55,880
voilà

114
00:04:55,880 --> 00:04:58,759
différents standards aussi

115
00:04:58,759 --> 00:05:00,960
différents standards

116
00:05:00,960 --> 00:05:02,280
non par exemple il y a des il y a des

117
00:05:02,280 --> 00:05:03,840
bases de données SQL qui implémentent

118
00:05:03,840 --> 00:05:04,880
plus ou moins les

119
00:05:04,880 --> 00:05:08,040
standards et on a des problèmes entre

120
00:05:08,040 --> 00:05:10,440
les les différents les différents

121
00:05:10,440 --> 00:05:11,759
standards qui existent tout n'est pas

122
00:05:11,759 --> 00:05:13,800
implémenté par ailleurs H2 d'implémente

123
00:05:13,800 --> 00:05:15,060
pas ne se comportera pas la même façon

124
00:05:15,060 --> 00:05:16,199
qu'une phase de pose Grey par exemple

125
00:05:16,199 --> 00:05:19,199
réel

126
00:05:19,199 --> 00:05:20,340
alors qu'est-ce qu'on Seigneur c'est une

127
00:05:20,340 --> 00:05:22,860
librairie Java qui existe à l'origine

128
00:05:22,860 --> 00:05:24,840
dans le monde Java depuis 2015 je crois

129
00:05:24,840 --> 00:05:27,900
j'ai retrouvé ça ça a été intégré avec

130
00:05:27,900 --> 00:05:29,639
juni 4 et Juni de 5 avec des annotations

131
00:05:29,639 --> 00:05:31,080
parce que en Java on aime bien les

132
00:05:31,080 --> 00:05:33,360
annotations et on en met partout et ça

133
00:05:33,360 --> 00:05:34,139
nous permet ça nous permet de

134
00:05:34,139 --> 00:05:35,759
bootstraper avant de lancer vos tests

135
00:05:35,759 --> 00:05:37,979
unitaires des containers conteneurs au

136
00:05:37,979 --> 00:05:42,000
sens container docker etc et à ma grande

137
00:05:42,000 --> 00:05:43,979
surprise je suis arrivé chez Ubisoft et

138
00:05:43,979 --> 00:05:45,240
moi ça me manquait beaucoup j'ai vu que

139
00:05:45,240 --> 00:05:47,940
la librairie Go existait donc j'ai sauté

140
00:05:47,940 --> 00:05:50,880
dessus et du coup on l'a implémenté dans

141
00:05:50,880 --> 00:05:52,919
l'équipe ça s'intègre avec le framework

142
00:05:52,919 --> 00:05:55,919
entre guillemets de test Go standard ça

143
00:05:55,919 --> 00:05:58,800
vient avec et ça s'intègre très bien on

144
00:05:58,800 --> 00:06:01,139
verra comment juste après alors quels

145
00:06:01,139 --> 00:06:03,060
sont les concepts de escomptiners le

146
00:06:03,060 --> 00:06:04,259
premier prérequis il vous faut de la

147
00:06:04,259 --> 00:06:05,639
conteneurisation parce que c'est dans le

148
00:06:05,639 --> 00:06:09,720
nom donc soit soit vous avez docker vous

149
00:06:09,720 --> 00:06:10,979
avez aussi ça c'est compatible avec

150
00:06:10,979 --> 00:06:12,600
padman si vous êtes un peu allergique à

151
00:06:12,600 --> 00:06:14,240
docker mais ça marche très bien

152
00:06:14,240 --> 00:06:16,259
qu'est-ce qu'on peut faire avec quand

153
00:06:16,259 --> 00:06:18,360
est-ce container mais on va pouvoir

154
00:06:18,360 --> 00:06:20,280
lancer des conteneurs pour les tests

155
00:06:20,280 --> 00:06:21,180
unitaires ou pour les tests de

156
00:06:21,180 --> 00:06:23,699
composants comme on l'a vu dans un

157
00:06:23,699 --> 00:06:26,460
contexte docker et on peut se couper ces

158
00:06:26,460 --> 00:06:27,720
tests là soit à un test en particulier

159
00:06:27,720 --> 00:06:30,660
soit un package soit à toute une tasse 8

160
00:06:30,660 --> 00:06:32,840
un ensemble de tests

161
00:06:32,840 --> 00:06:36,060
Go mais voilà c'est on peut le décider

162
00:06:36,060 --> 00:06:37,680
de quand lancer le conteneur quand le

163
00:06:37,680 --> 00:06:39,539
réinitialiser quand on démonte un volume

164
00:06:39,539 --> 00:06:42,300
remonter un volume etc et il s'agit

165
00:06:42,300 --> 00:06:43,500
avant tout de conteneurs jetable c'est

166
00:06:43,500 --> 00:06:45,120
très important pour la reproductibilité

167
00:06:45,120 --> 00:06:47,880
votre votre collègue va pouvoir jouer

168
00:06:47,880 --> 00:06:49,919
les tests sur le même conteneur dans les

169
00:06:49,919 --> 00:06:51,840
mêmes circonstances et on en parlera un

170
00:06:51,840 --> 00:06:53,340
peu après

171
00:06:53,340 --> 00:06:54,539
et maintenant qu'est-ce qu'on peut faire

172
00:06:54,539 --> 00:06:57,020
avec test conteneur mais on va pouvoir

173
00:06:57,020 --> 00:06:59,160
s'interfacer avec ces trois endroits et

174
00:06:59,160 --> 00:07:01,680
surtout se passer de la masse de la base

175
00:07:01,680 --> 00:07:02,940
de données mémoire parce qu'on a vu que

176
00:07:02,940 --> 00:07:03,960
c'était pas forcément une bonne chose

177
00:07:03,960 --> 00:07:05,840
dans certains cas

178
00:07:05,840 --> 00:07:07,979
on peut implémenter on va pouvoir venir

179
00:07:07,979 --> 00:07:09,720
tester uniquement les entrepôts les

180
00:07:09,720 --> 00:07:11,940
repositoris si vous faites du DDD on va

181
00:07:11,940 --> 00:07:13,880
pouvoir tester les ressources

182
00:07:13,880 --> 00:07:16,680
les points d'API si votre Freebox

183
00:07:16,680 --> 00:07:18,120
vraiment que le permet par exemple vous

184
00:07:18,120 --> 00:07:19,560
pouvez tester une API et voir comment

185
00:07:19,560 --> 00:07:20,699
elle se comporte avec une vraie base de

186
00:07:20,699 --> 00:07:23,460
données qui répondra à vos vrais ORL ou

187
00:07:23,460 --> 00:07:25,740
tout ce que vous voulez data mapers DTO

188
00:07:25,740 --> 00:07:29,599
ses réalisations et que sais-je

189
00:07:30,539 --> 00:07:31,880
alors je vais vous montrer un peu de GO

190
00:07:31,880 --> 00:07:34,400
désolé

191
00:07:34,400 --> 00:07:38,280
avant tout donc Go là j'ai fait un petit

192
00:07:38,280 --> 00:07:40,800
un petit une petite truc qui représente

193
00:07:40,800 --> 00:07:43,199
un jeu et un repositori donc un

194
00:07:43,199 --> 00:07:45,060
repositori c'est une interface qui vient

195
00:07:45,060 --> 00:07:47,099
représenter l'illusion de l'accès

196
00:07:47,099 --> 00:07:50,220
mémoire à une collection de choses c'est

197
00:07:50,220 --> 00:07:52,080
ce que dit le livre domaine Riven design

198
00:07:52,080 --> 00:07:55,259
et là en gros ça se fait comme ça ça

199
00:07:55,259 --> 00:07:56,699
peut se faire comme ça il y a pas de

200
00:07:56,699 --> 00:07:58,680
façon unique mais là j'ai écrit une

201
00:07:58,680 --> 00:08:00,780
interface qui vient requêter tous les

202
00:08:00,780 --> 00:08:02,460
jeux rajouter un jeu à l'entrepôt en

203
00:08:02,460 --> 00:08:04,380
enlevé un et récupérer un jeu par son

204
00:08:04,380 --> 00:08:06,840
game Heidi on voit que le jeu vient non

205
00:08:06,840 --> 00:08:08,160
et puis un Peggy vous savez c'est les

206
00:08:08,160 --> 00:08:11,819
codes classification non

207
00:08:13,440 --> 00:08:15,680
Ubisoft

208
00:08:17,120 --> 00:08:19,979
entrepôt Mongo donc comment ça se passe

209
00:08:19,979 --> 00:08:22,379
quand on veut l'implémenter en gros on

210
00:08:22,379 --> 00:08:23,460
l'écrit qu'on l'écrirait comme ça donc

211
00:08:23,460 --> 00:08:25,560
on a un contexte groupe peu importe et

212
00:08:25,560 --> 00:08:27,060
puis on appelle la collection replace

213
00:08:27,060 --> 00:08:28,740
one on met du bizone et puis on remplace

214
00:08:28,740 --> 00:08:30,660
un truc existent dans la base de données

215
00:08:30,660 --> 00:08:32,339
ça ça se passe bien mais on aimerait

216
00:08:32,339 --> 00:08:33,779
bien le tester parce que on sait pas si

217
00:08:33,779 --> 00:08:35,339
ça marche et souvent on attend des fois

218
00:08:35,339 --> 00:08:36,479
les déploiement en prod pour voir que ça

219
00:08:36,479 --> 00:08:38,520
marche pas

220
00:08:38,520 --> 00:08:41,099
ça n'est jamais arrivé et qu'est-ce

221
00:08:41,099 --> 00:08:43,440
container comment ça marche on vient

222
00:08:43,440 --> 00:08:45,779
d'écrire une conteneur request qui en

223
00:08:45,779 --> 00:08:47,399
fait dire moi je veux utiliser cette

224
00:08:47,399 --> 00:08:48,959
image donc ça ça fait partie à partir de

225
00:08:48,959 --> 00:08:49,940
maintenant ça fait partie de la

226
00:08:49,940 --> 00:08:52,260
libécontinence donc je dis je veux une

227
00:08:52,260 --> 00:08:54,600
image mon godb 5 08 qui est exactement

228
00:08:54,600 --> 00:08:55,800
celle que j'utilise en prod de

229
00:08:55,800 --> 00:08:57,019
préférence

230
00:08:57,019 --> 00:09:00,300
j'expose un port et CP 27,17 qui est le

231
00:09:00,300 --> 00:09:02,880
port standard j'attends peut-être qu'on

232
00:09:02,880 --> 00:09:05,279
t'énerve va attendre que le port soit ma

233
00:09:05,279 --> 00:09:08,580
paix et répondent bien en interne

234
00:09:08,580 --> 00:09:10,279
et ensuite va l'exposer sur un port

235
00:09:10,279 --> 00:09:12,540
choisi aléatoirement qu'on va pouvoir

236
00:09:12,540 --> 00:09:13,920
récupérer mais il va choisir le premier

237
00:09:13,920 --> 00:09:15,839
port disponible sur la machine on peut

238
00:09:15,839 --> 00:09:17,100
le paramétrer mais par défaut il va

239
00:09:17,100 --> 00:09:18,300
faire ça

240
00:09:18,300 --> 00:09:19,620
ensuite en instancie le générique

241
00:09:19,620 --> 00:09:21,360
container on dit ben j'attends qu'il

242
00:09:21,360 --> 00:09:24,260
soit démarré et après la ligne 7 ici là

243
00:09:24,260 --> 00:09:26,820
si quand le container va être démarré et

244
00:09:26,820 --> 00:09:28,860
qui va répondre sur le port 27 07 il

245
00:09:28,860 --> 00:09:31,320
sera immédiatement disponible

246
00:09:31,320 --> 00:09:32,279
qu'est-ce que ça veut dire ça veut dire

247
00:09:32,279 --> 00:09:33,899
que je peux récupérer le port que docker

248
00:09:33,899 --> 00:09:35,279
m'amapé parce que je ne le connais pas

249
00:09:35,279 --> 00:09:36,899
je dis et au fait ça m’appelait le port

250
00:09:36,899 --> 00:09:38,959
27 017 sur quel port de mon host local

251
00:09:38,959 --> 00:09:42,120
il le dit donc là je peux construire mon

252
00:09:42,120 --> 00:09:43,440
url de connexion local à ma base de

253
00:09:43,440 --> 00:09:46,940
données temporaire mon

254
00:09:47,300 --> 00:09:50,220
gobb/los:57023 j'en sais rien

255
00:09:50,220 --> 00:09:52,800
et ensuite en gros pour s'intégrer il y

256
00:09:52,800 --> 00:09:53,940
a pas de framework en gros tout est dans

257
00:09:53,940 --> 00:09:55,399
le code la vérité dans le code en gros

258
00:09:55,399 --> 00:09:58,140
on essaie d'avoir des librairies et là

259
00:09:58,140 --> 00:09:59,820
c'est le framework de test standard de

260
00:09:59,820 --> 00:10:01,080
Go il y a quelque chose qui s'appelle

261
00:10:01,080 --> 00:10:03,540
test main c'est ni plus ni moins qu'un

262
00:10:03,540 --> 00:10:05,420
bifor et after de

263
00:10:05,420 --> 00:10:08,700
test en fait si vous voulez

264
00:10:08,700 --> 00:10:10,200
le before c'est tout ce que j'écris de

265
00:10:10,200 --> 00:10:13,080
la ligne 2 à 17 et le M d'autres run

266
00:10:13,080 --> 00:10:15,720
c'est pour dire exécute mes tests

267
00:10:15,720 --> 00:10:17,339
et ensuite je rappe le code de retour

268
00:10:17,339 --> 00:10:19,140
des tests sur le os.exit mais c'est tout

269
00:10:19,140 --> 00:10:20,580
j'aurais pu écrire des choses après la

270
00:10:20,580 --> 00:10:22,380
ligne 18 ce serait le after en fait de

271
00:10:22,380 --> 00:10:24,660
l'exécution de tout mes tests alors là

272
00:10:24,660 --> 00:10:26,279
je dis juste avant l'exécution de tout

273
00:10:26,279 --> 00:10:27,480
mes tests

274
00:10:27,480 --> 00:10:30,600
tu te connectes ce que j'ai mis en point

275
00:10:30,600 --> 00:10:33,080
point ce serait l'instanciation du

276
00:10:33,080 --> 00:10:36,360
démarrage de mon conteneur Mango dB et

277
00:10:36,360 --> 00:10:39,000
je dis mon goût.ioal Games c'est mon

278
00:10:39,000 --> 00:10:41,339
repository je récupère mon repositori et

279
00:10:41,339 --> 00:10:42,360
le défaire c'est pour quelque chose qui

280
00:10:42,360 --> 00:10:44,459
va se déclencher automatiquement en gros

281
00:10:44,459 --> 00:10:47,220
sur la stack après ma fonction donc en

282
00:10:47,220 --> 00:10:49,680
fait c'est j'ai dit que j'ai menti après

283
00:10:49,680 --> 00:10:51,480
la ligne 18 j'ai ce code là qui va

284
00:10:51,480 --> 00:10:53,820
s'exécuter en fait c'est le défaire en

285
00:10:53,820 --> 00:10:55,500
gros déferdi après l'exécution de la

286
00:10:55,500 --> 00:10:57,540
fonction tu trigores ce que tu as écrit

287
00:10:57,540 --> 00:10:59,519
dans le défaire dans l'ordre inverse on

288
00:10:59,519 --> 00:11:01,040
empile des choses à faire

289
00:11:01,040 --> 00:11:03,480
et là je dis je dis je déconnecte

290
00:11:03,480 --> 00:11:04,800
proprement de ma base de données après

291
00:11:04,800 --> 00:11:06,180
mes tests

292
00:11:06,180 --> 00:11:07,860
voilà et juste avec ces petites lignes

293
00:11:07,860 --> 00:11:08,820
j'ai testé une vraie base de données

294
00:11:08,820 --> 00:11:10,440
Mango sur mes tests et j'ai utilisé

295
00:11:10,440 --> 00:11:12,300
l'implémentation Mango dB de mes tests

296
00:11:12,300 --> 00:11:16,500
dans ma base et ensuite on teste donc là

297
00:11:16,500 --> 00:11:17,459
je vous montre par exemple de ce que ça

298
00:11:17,459 --> 00:11:19,079
donnerait j'appelle mon repository de

299
00:11:19,079 --> 00:11:21,060
holgame je rajoute un jeu avec un Game

300
00:11:21,060 --> 00:11:24,540
ID random new string uidi je mets un jeu

301
00:11:24,540 --> 00:11:27,260
pas très connu

302
00:11:27,260 --> 00:11:31,019
et ensuite je le récupère et j'accerte

303
00:11:31,019 --> 00:11:33,260
que on récupère bien le

304
00:11:33,260 --> 00:11:35,339
jeu dans le repository land dans

305
00:11:35,339 --> 00:11:36,779
l'entrepôt de jeu ce qui est intéressant

306
00:11:36,779 --> 00:11:37,920
c'est que là en ces petites lignes là

307
00:11:37,920 --> 00:11:39,420
j'ai vraiment testé du Mango dB avec la

308
00:11:39,420 --> 00:11:41,700
vraie connexion le vrai protocoles Mango

309
00:11:41,700 --> 00:11:43,260
dB et j'ai pas appelé une base de

310
00:11:43,260 --> 00:11:44,459
données mémoire qui va pas du tout se

311
00:11:44,459 --> 00:11:45,300
comporter comme une base de données

312
00:11:45,300 --> 00:11:48,180
réelle donc là

313
00:11:48,180 --> 00:11:49,800
je vais passer à la démo et toutes les

314
00:11:49,800 --> 00:11:52,200
démos se passent bien en général ça

315
00:11:52,200 --> 00:11:53,459
c'était la démo de la vitre incassable

316
00:11:53,459 --> 00:11:56,240
de chez Tesla

317
00:11:57,839 --> 00:12:01,680
notre cher Elon Musk hop alors pas de

318
00:12:01,680 --> 00:12:04,079
polémique tri alors on a le on a le jeu

319
00:12:04,079 --> 00:12:05,880
là c'est ce que je vous montrerai tout à

320
00:12:05,880 --> 00:12:09,120
l'heure on avait pository all games

321
00:12:09,120 --> 00:12:10,519
et on a

322
00:12:10,519 --> 00:12:12,839
l'implémentation mémoire et mon gobé

323
00:12:12,839 --> 00:12:14,399
donc si je vous montre le Mango dB c'est

324
00:12:14,399 --> 00:12:15,120
ce que je vous ai montré tout à l'heure

325
00:12:15,120 --> 00:12:17,660
je récupère un jeu par son Heidi

326
00:12:17,660 --> 00:12:20,399
je viens faire de la sérialisation enfin

327
00:12:20,399 --> 00:12:21,720
je passe de mon domaine vers ma

328
00:12:21,720 --> 00:12:22,880
représentation

329
00:12:22,880 --> 00:12:25,579
base de données et vice-versa

330
00:12:25,579 --> 00:12:27,420
voilà ça c'est mon implantation

331
00:12:27,420 --> 00:12:30,300
j'aimerais bien tester et maintenant

332
00:12:30,300 --> 00:12:32,279
j'ai comme je vous le disais mes tests

333
00:12:32,279 --> 00:12:34,279
ici et si je les lance

334
00:12:34,279 --> 00:12:38,540
donc je vais lancer Olga me test

335
00:12:39,060 --> 00:12:41,399
ça c'est les tests mais la petite

336
00:12:41,399 --> 00:12:42,959
subtilité c'est que c'est sans aucun

337
00:12:42,959 --> 00:12:45,779
peut-être container parce que j'ai

338
00:12:45,779 --> 00:12:47,940
conditionné mes tests sur la présence de

339
00:12:47,940 --> 00:12:49,440
du fameux port de la base de données

340
00:12:49,440 --> 00:12:50,579
s'il n'est pas là je passe en

341
00:12:50,579 --> 00:12:52,139
implémentation mémoire c'est pas quelque

342
00:12:52,139 --> 00:12:52,980
chose que je recommanderais en

343
00:12:52,980 --> 00:12:54,660
production enfin plutôt dans vos tests

344
00:12:54,660 --> 00:12:57,839
et vos pipelines de c.i par contre là si

345
00:12:57,839 --> 00:12:59,820
je lance je viens juste de lancer en

346
00:12:59,820 --> 00:13:01,680
quelques petites secondes à mon mon

347
00:13:01,680 --> 00:13:03,839
docker local sur ma machine je vais

348
00:13:03,839 --> 00:13:06,180
attendre qu'il démarre

349
00:13:06,180 --> 00:13:08,579
là on voit qu'il démarre voilà il a

350
00:13:08,579 --> 00:13:10,079
démarré il a démarré et là je vais

351
00:13:10,079 --> 00:13:11,399
simplement relancer les mêmes tests que

352
00:13:11,399 --> 00:13:13,700
je viens de lancer

353
00:13:15,360 --> 00:13:17,760
et là il y a les logs différents il

354
00:13:17,760 --> 00:13:19,200
démarre des comptes et j'ai vu la

355
00:13:19,200 --> 00:13:22,320
rapidité là il a démarré un contenait au

356
00:13:22,320 --> 00:13:24,420
début il a lancé mes tests à De Replay

357
00:13:24,420 --> 00:13:27,120
by et old sur mon repository et là je

358
00:13:27,120 --> 00:13:28,980
viens de faire la même exécution juste

359
00:13:28,980 --> 00:13:30,180
avec une vraie base de données Mango dB

360
00:13:30,180 --> 00:13:32,339
donc si je vous montre les logs ce qui

361
00:13:32,339 --> 00:13:34,800
s'est passé c'est qu'il a créé il allait

362
00:13:34,800 --> 00:13:36,000
récupérer l'image que j'avais dans le

363
00:13:36,000 --> 00:13:38,459
cache locale docker dans mon redistri

364
00:13:38,459 --> 00:13:41,779
local plutôt il a pris riuc riux

365
00:13:41,779 --> 00:13:44,060
Death Note

366
00:13:44,060 --> 00:13:47,760
riux c'est le c'est le démon de la mort

367
00:13:47,760 --> 00:13:51,779
et Rieux là avec tes escompteener c'est

368
00:13:51,779 --> 00:13:53,220
de nettoyer les volumes et de tout

369
00:13:53,220 --> 00:13:54,899
nettoyer de tout tuer en fait après que

370
00:13:54,899 --> 00:13:56,700
vous ayez lancer vos tests unitaire

371
00:13:56,700 --> 00:13:58,920
enfin tester ce compte donc c'est le nom

372
00:13:58,920 --> 00:14:01,079
est fun quoi donc il télécharge l'image

373
00:14:01,079 --> 00:14:02,660
Mango

374
00:14:02,660 --> 00:14:04,920
il lance le container et l'envoi qui l'a

375
00:14:04,920 --> 00:14:06,899
mis sur le port 4991 que je vous disais

376
00:14:06,899 --> 00:14:08,279
tout à l'heure j'ai lancé tous mes tests

377
00:14:08,279 --> 00:14:11,040
et ça et ça répond voilà

378
00:14:11,040 --> 00:14:13,200
et bon je vais pas vous montrer il y

379
00:14:13,200 --> 00:14:14,519
aura le lien vers le code pour si vous

380
00:14:14,519 --> 00:14:15,779
voulez regarder ce qui se passe plus en

381
00:14:15,779 --> 00:14:18,120
détail avec le test Mane etc

382
00:14:18,120 --> 00:14:19,680
j'ai écrit un article médium là-dessus

383
00:14:19,680 --> 00:14:21,240
vous aurez encore une fois les liens

384
00:14:21,240 --> 00:14:22,320
dans le QR code que je vais vous envoyer

385
00:14:22,320 --> 00:14:23,579
tout à l'heure si vous voulez commencer

386
00:14:23,579 --> 00:14:26,360
à dégainer les téléphones

387
00:14:27,800 --> 00:14:29,700
comment ça se passe mais de manière très

388
00:14:29,700 --> 00:14:31,079
simple quand vous faites il vous faut

389
00:14:31,079 --> 00:14:32,700
juste un Runner docker si vous êtes sur

390
00:14:32,700 --> 00:14:34,740
gitlab ou implémenter du docker socket

391
00:14:34,740 --> 00:14:38,220
binding ou docker in docker le dinde

392
00:14:38,220 --> 00:14:40,380
vous savez vous voyez souvent c'est un

393
00:14:40,380 --> 00:14:42,240
service qui existe sous gitlab et il

394
00:14:42,240 --> 00:14:44,120
faut juste donner l'accès à votre Runner

395
00:14:44,120 --> 00:14:46,860
à la socquette docker qui est sur le

396
00:14:46,860 --> 00:14:49,500
host et le host c'est votre série et

397
00:14:49,500 --> 00:14:50,579
après vous faites quoi vous faites Go

398
00:14:50,579 --> 00:14:52,519
test tirer vers Bose

399
00:14:52,519 --> 00:14:54,300
ce qui va lancer tous les tests de

400
00:14:54,300 --> 00:14:57,360
manière récursive en Go et là bah ça

401
00:14:57,360 --> 00:14:59,040
détecte que mon got tourne qui est

402
00:14:59,040 --> 00:15:00,720
disponible et ça exécute tous les tests

403
00:15:00,720 --> 00:15:03,440
où mon goût ou posterait un peu importe

404
00:15:03,440 --> 00:15:05,339
ma surprise c'est que c'est disponible

405
00:15:05,339 --> 00:15:08,040
dans plein de langage Java Go DotNet

406
00:15:08,040 --> 00:15:11,579
note python rust et Scala je crois il en

407
00:15:11,579 --> 00:15:12,899
manque un donc vous avez été ce

408
00:15:12,899 --> 00:15:14,699
conteneur pour tous ces langages là

409
00:15:14,699 --> 00:15:16,500
je savais pas avant de sortir du monde

410
00:15:16,500 --> 00:15:18,240
Java

411
00:15:18,240 --> 00:15:20,399
si vous voulez avoir ces slides et c'est

412
00:15:20,399 --> 00:15:22,500
à ce QR code donc je vous laisse le

413
00:15:22,500 --> 00:15:24,600
temps de scanner il nous reste un peu de

414
00:15:24,600 --> 00:15:25,920
temps vraiment on va être dans le timing

415
00:15:25,920 --> 00:15:28,320
donc ça c'est les slides et sur les

416
00:15:28,320 --> 00:15:30,240
slides vous retrouverez l'intégralité de

417
00:15:30,240 --> 00:15:34,079
de ça et

418
00:15:34,680 --> 00:15:36,720
je crois que c'est tout je sais pas si

419
00:15:36,720 --> 00:15:37,380
j'ai le temps de prendre des questions

420
00:15:37,380 --> 00:15:40,100
ou pas quelques questions

421
00:15:40,100 --> 00:15:42,120
on peut en faire une discussion en même

422
00:15:42,120 --> 00:15:45,240
temps oui

423
00:15:48,180 --> 00:15:51,300
est-ce que tu conseillerais de remplir

424
00:15:51,300 --> 00:15:53,579
la base de données test containers avec

425
00:15:53,579 --> 00:15:55,500
des assets de données typiquement tes

426
00:15:55,500 --> 00:15:57,000
assets de données tu peux avoir en

427
00:15:57,000 --> 00:15:57,980
production pour avoir quelque chose de

428
00:15:57,980 --> 00:16:00,300
de similaire à de comparable très bonne

429
00:16:00,300 --> 00:16:01,680
question moi je le recommande pas du

430
00:16:01,680 --> 00:16:03,300
tout parce que je suis pour la

431
00:16:03,300 --> 00:16:04,740
reproductibilité des tests et pour moi

432
00:16:04,740 --> 00:16:06,360
chaque test au sud de test devrait

433
00:16:06,360 --> 00:16:08,760
générer ces données en amont et les

434
00:16:08,760 --> 00:16:10,680
nettoyer si si nécessaire moi j'aime

435
00:16:10,680 --> 00:16:12,120
bien ne pas avoir les nettoyer je

436
00:16:12,120 --> 00:16:14,220
conçois les tests unitaires pour qu'il y

437
00:16:14,220 --> 00:16:15,240
ait aucune collision avec les autres

438
00:16:15,240 --> 00:16:17,220
tests ça veut dire avoir plus de rigueur

439
00:16:17,220 --> 00:16:20,100
mais par exemple créer des UID pour pour

440
00:16:20,100 --> 00:16:23,040
mon repository j'ai créé des rounds.u.id

441
00:16:23,040 --> 00:16:25,019
à chaque fois et à la fin ils existent

442
00:16:25,019 --> 00:16:27,420
en base si je tue mon ma base de données

443
00:16:27,420 --> 00:16:28,680
ils vont disparaître mais je peux

444
00:16:28,680 --> 00:16:30,660
relancer la tête suite avec des nouveaux

445
00:16:30,660 --> 00:16:32,279
ID générés dynamiquement et elle va

446
00:16:32,279 --> 00:16:33,720
passer je ne le recommanderais pas parce

447
00:16:33,720 --> 00:16:36,180
que ça a introduit déjà de la cohésion

448
00:16:36,180 --> 00:16:38,100
entre les tests potentiellement et aussi

449
00:16:38,100 --> 00:16:40,139
entre vos équipiers dans l'équipe parce

450
00:16:40,139 --> 00:16:43,019
que il faut il faut voilà après ça peut

451
00:16:43,019 --> 00:16:44,699
se scripter vous pouvez pour scripter

452
00:16:44,699 --> 00:16:46,320
l'injection de données avant l'exécution

453
00:16:46,320 --> 00:16:48,120
des tests ça peut se faire

454
00:16:48,120 --> 00:16:49,620
par contre je recommande l'exécution de

455
00:16:49,620 --> 00:16:51,540
migration de schéma sur la base pose

456
00:16:51,540 --> 00:16:53,220
Grey avant tous les tests c'est ce que

457
00:16:53,220 --> 00:16:55,500
l'on fait en général mais les jeux de

458
00:16:55,500 --> 00:16:57,199
données j'aime bien que mes tests soient

459
00:16:57,199 --> 00:17:02,459
garantes ça en fait ok merci

460
00:17:02,519 --> 00:17:05,480
je crois qu'il y avait oui

461
00:17:07,880 --> 00:17:12,119
tu es en partie évoqué ma question c'est

462
00:17:12,119 --> 00:17:13,260
comment tu testes la migration des

463
00:17:13,260 --> 00:17:15,480
données alors en gros il y a quelque

464
00:17:15,480 --> 00:17:17,339
chose qui s'appelle Go mygrate de

465
00:17:17,339 --> 00:17:20,780
mémoire qui va en JVM plutôt

466
00:17:20,780 --> 00:17:25,520
flyway c'est que des noms américains

467
00:17:27,500 --> 00:17:29,780
la migration

468
00:17:29,780 --> 00:17:32,840
de la

469
00:17:34,280 --> 00:17:36,980
migrations

470
00:17:36,980 --> 00:17:40,860
alors oui alors c'est passé d'une d'un

471
00:17:40,860 --> 00:17:42,360
nouveau schéma un autre par exemple et

472
00:17:42,360 --> 00:17:44,059
bien il te faut malheureusement

473
00:17:44,059 --> 00:17:47,220
c'est dur nous on le fait pas mais sur

474
00:17:47,220 --> 00:17:48,840
pose Grey oui il y a des techniques qui

475
00:17:48,840 --> 00:17:50,820
existent ça veut dire qu'il faut que tu

476
00:17:50,820 --> 00:17:52,940
injectes volontairement

477
00:17:52,940 --> 00:17:55,740
quelque chose en base qui va être dating

478
00:17:55,740 --> 00:17:56,760
par exemple par rapport à ton nouveau

479
00:17:56,760 --> 00:17:58,380
schéma ou alors que t'injectes ton

480
00:17:58,380 --> 00:18:00,539
schéma valide avant

481
00:18:00,539 --> 00:18:01,980
ombi fort que tu lances ton ce que tu

482
00:18:01,980 --> 00:18:03,539
contrôle la façon dont tu lances ton ta

483
00:18:03,539 --> 00:18:05,400
migration de schéma donc qui fait partie

484
00:18:05,400 --> 00:18:06,840
de ton test et ensuite tu vas pouvoir

485
00:18:06,840 --> 00:18:09,360
constater ou non l'échec de cette

486
00:18:09,360 --> 00:18:10,980
migration mais pour reproduire un

487
00:18:10,980 --> 00:18:12,120
problème particulier de migration tu

488
00:18:12,120 --> 00:18:13,980
peux le faire parce que tu peux tu peux

489
00:18:13,980 --> 00:18:16,080
tu peux te dire là je l'habitude

490
00:18:16,080 --> 00:18:18,240
d'habitude je démarre mes tests et avant

491
00:18:18,240 --> 00:18:20,100
de mes tests je joue l'immigration là

492
00:18:20,100 --> 00:18:21,120
c'est pas intéressant par contre tu peux

493
00:18:21,120 --> 00:18:22,919
dire je démarre mes tests j'injecte un

494
00:18:22,919 --> 00:18:25,620
truc je lance ma migration tu veux tout

495
00:18:25,620 --> 00:18:26,940
faire hein c'est programmatique tu peux

496
00:18:26,940 --> 00:18:28,799
le changer l'ordre en fait de ces étapes

497
00:18:28,799 --> 00:18:30,840
là OK et en Java c'est plus dur parce

498
00:18:30,840 --> 00:18:32,100
qu'il y a des framework donc on a pas le

499
00:18:32,100 --> 00:18:33,660
contrôle sur flyway en général en gros

500
00:18:33,660 --> 00:18:36,020
c'est plus simple

501
00:19:32,030 --> 00:19:33,919
[Musique]

502
00:19:33,919 --> 00:19:36,980
de rien

503
00:19:39,700 --> 00:19:46,789
[Applaudissements]

